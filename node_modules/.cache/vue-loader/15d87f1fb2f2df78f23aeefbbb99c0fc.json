{"remainingRequest":"/Users/tayoegbodofo/Desktop/MW/mobile_waiter_new/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/tayoegbodofo/Desktop/MW/mobile_waiter_new/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tayoegbodofo/Desktop/MW/mobile_waiter_new/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tayoegbodofo/Desktop/MW/mobile_waiter_new/src/components/Home.vue?vue&type=template&id=8dc7cce2&scoped=true&","dependencies":[{"path":"/Users/tayoegbodofo/Desktop/MW/mobile_waiter_new/src/components/Home.vue","mtime":1588012978810},{"path":"/Users/tayoegbodofo/Desktop/MW/mobile_waiter_new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tayoegbodofo/Desktop/MW/mobile_waiter_new/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/tayoegbodofo/Desktop/MW/mobile_waiter_new/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tayoegbodofo/Desktop/MW/mobile_waiter_new/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}